/*
Initial JSX Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useStore, GAME_STATES } from "./Store";
import { useSpring, animated } from "@react-spring/three";
import * as THREE from "three";

export default function Tamagotchi(props) {
	const { nodes, materials } = useGLTF("/tamagotchi.glb");

	// Refs
	const tamagotchiRef = useRef();
	const leftButtonRef = useRef();
	const middleButtonRef = useRef();
	const rightButtonRef = useRef();

	const { setFood, scoreTotal, currentState, setState, feedFood } = useStore();

	const screenMaterial = useMemo(() => {
		const newMaterial = materials["Material.002"].clone();
		if (scoreTotal === 4) {
			newMaterial.emissive = new THREE.Color("#ffffff");
			newMaterial.emissiveIntensity = 1.0;
		} else if (scoreTotal === 3) {
			newMaterial.emissive = new THREE.Color("#ffffff");
			newMaterial.emissiveIntensity = 0.8;
		} else {
			newMaterial.emissive = new THREE.Color("#000000");
			newMaterial.emissiveIntensity = 0;
		}
		return newMaterial;
	}, [scoreTotal]);

	// Handle Button Clicks
	// TODO: button click animations
	const handleLeftClick = () => {
		if (currentState === GAME_STATES.START) {
			setState(GAME_STATES.IDLE);
			return;
		}
		if (scoreTotal === 4 || currentState === GAME_STATES.EATING) return;
		setState(GAME_STATES.EATING);
		feedFood("candy");
		setFood("candy");
		setTimeout(() => setState(GAME_STATES.IDLE), 1000);
	};
	const handleMiddleClick = () => {
		if (currentState === GAME_STATES.START) {
			setState(GAME_STATES.IDLE);
			return;
		}
		if (scoreTotal === 4 || currentState === GAME_STATES.EATING) return;
		setState(GAME_STATES.EATING);
		feedFood("tofu");
		setFood("tofu");
		setTimeout(() => setState(GAME_STATES.IDLE), 1000);
	};
	const handleRightClick = () => {
		if (currentState === GAME_STATES.START) {
			setState(GAME_STATES.IDLE);
			return;
		}
		if (scoreTotal === 4 || currentState === GAME_STATES.EATING) return;
		setState(GAME_STATES.EATING);
		feedFood("pizza");
		setFood("pizza");
		setTimeout(() => setState(GAME_STATES.IDLE), 1000);
	};

	const handleCreatureClick = () => {
		if (scoreTotal === 4 || currentState !== GAME_STATES.IDLE) return;
		console.log("Creature clicked!");
	};

	return (
		<group {...props} dispose={null} rotation={[0, 89.5, Math.PI]}>
			<group
				position={[0.03, -2.865, 0]}
				scale={[0.779, 2.767, 2.167]}
				ref={tamagotchiRef}
				onClick={handleCreatureClick}>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Sphere.geometry}
					material={materials["Material.001"]}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Sphere_1.geometry}
					// material={materials["Material.002"]}
					material={screenMaterial}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Sphere_2.geometry}
					material={materials["Material.003"]}
				/>
			</group>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.ButtonA.geometry}
				material={materials["Material.004"]}
				position={[0.643, -1.214, 0]}
				rotation={[-1.572, -0.238, 1.583]}
				scale={[0.168, 0.106, 0.177]}
				ref={middleButtonRef}
				onClick={handleMiddleClick}
			/>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.ButtonA001.geometry}
				material={materials["Material.004"]}
				position={[0.643, -1.332, 0.796]}
				rotation={[-1.572, -0.238, 1.583]}
				scale={[0.168, 0.106, 0.177]}
				ref={rightButtonRef}
				onClick={handleRightClick}
			/>
			<mesh
				castShadow
				receiveShadow
				geometry={nodes.ButtonA002.geometry}
				material={materials["Material.004"]}
				position={[0.643, -1.332, -0.828]}
				rotation={[-1.572, -0.238, 1.583]}
				scale={[0.168, 0.106, 0.177]}
				ref={leftButtonRef}
				onClick={handleLeftClick}
			/>
		</group>
	);
}

useGLTF.preload("/tamagotchi.glb");
